#!/usr/bin/env python

import os
import json
import time
import configparser
import signal
import logging
import sys
from w1thermsensor import W1ThermSensor
import paho.mqtt.client as mqtt
import socket

def keyboardInterruptHandler(signal, frame):
    logger.info("KeyboardInterrupt (ID: {}), exiting...".format(signal))
    exit(0)


def setup_logging():
    global logger
    logger = logging.getLogger(os.path.basename(__file__))
    logger.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    try:
        logfile = '/tmp/' + os.path.basename(__file__) + '.log'
        fh = logging.FileHandler(logfile, mode='a', encoding=None, delay=False)
        fh.setLevel(logging.DEBUG)
        fh.setFormatter(formatter)
        logger.addHandler(fh)
    except IOError:
        logger.warn('Failed to write ' + logfile)

# logger.debug('debug message')
# logger.info('info message')
# logger.warn('warn message')
# logger.error('error message')
# logger.critical('critical message')


def get_config_safe(section, option, default=None):
    try:
        return config.get(section, option)
    except (configparser.NoOptionError, configparser.NoSectionError, ValueError):
        logger.info('Could not find section [%s] option "%s"' % (section, option))
        return default


def on_connect(client, userdata, flags, rc):
    if int(str(rc)) == 0:
        logger.info("Connection successful")
        client.connected = True
    elif int(str(rc)) == 1:        logger.warn("Connection refused - incorrect protocol version")
    elif int(str(rc)) == 2:
        logger.warn("Connection refused - invalid client identifier")
    elif int(str(rc)) == 3:
        logger.warn("Connection refused - server unavailable")
    elif int(str(rc)) == 4:
        logger.warn("Connection refused - bad username or password")
    elif int(str(rc)) == 5:
        logger.warn("Connection refused - not authorised")


def on_disconnect(client, userdata, rc):
    if rc != 0:
        logger.error("Unexpected disconnection. RC = " + str(rc))
        client.connected = False


def on_publish(client, userdata, mid):
    logger.info("Message " + str(mid) + " published.")


def device_config(id, name):
    device = {}
    device['unit_of_measurement'] = degree + unit
    device['icon'] = 'mdi:thermometer'
    device['name'] = id
    device['state_topic'] = topic + '/sensor/' + id + '/state'
    device['unique_id'] = id
    device['device'] = {
        "identifiers": id,
        "manufacturer": "Dallas",
        "model": name,
        "name": id,
    }
    return json.dumps(device)


def connect_to_broker(host):
    global client
    logger.info("Connecting to " + host)
    mqtt.Client.connected = False
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    # client.on_message = on_message
    # client.on_publish = on_publish
    if username != "" and password != "":
        client.username_pw_set(username, password=password)

    try:
        client.connect(host)
    except socket.gaierror as e:
        logger.critical("Invalid host, " + str(broker))
        exit(69)
    except socket.error as e:
        logger.critical("Could not connect to " + str(broker))
        exit(69)

    client.loop_start()
    while not client.connected:
        time.sleep(0.2)


def get_config():
    global config, homeassistant, interval, unit, broker, port, username, password, topic
    config = configparser.ConfigParser()

    try:
        with open('config.ini') as file:
            config.readfp(file)
    except IOError:
        logger.error("Failed to open config.ini")
        exit(66)

    homeassistant = get_config_safe('general', 'homeassistant', False)
    interval = get_config_safe('general', 'interval', '30')
    unit = get_config_safe('general', 'unit', 'C')
    broker = get_config_safe('mqtt', 'broker', None)
    port = get_config_safe('mqtt', 'port', '1884')
    username = get_config_safe('mqtt', 'username', "")
    password = get_config_safe('mqtt', 'password', "")
    topic = get_config_safe('mqtt', 'topic', "")
    if unit.upper() not in ('C', 'F', 'K'):
        unit = 'C'

def get_sensors():
    get_sensors = W1ThermSensor.get_available_sensors()
    logger.info("Found %s sensors" % (len(get_sensors)))
    return get_sensors


def publish_config(sensors):
    if homeassistant == "true":
        for sensor in sensors:
            ha_topic = "homeassistant/sensor/"
            device_json = device_config(sensor.id, sensor.type.name)
            logger.info("Publishing config for sensor " + sensor.id)
            client.publish(ha_topic + sensor.id + "/temp/config", device_json)


def publish_sensors(sensors):
    for sensor in sensors:
        if unit.upper() == 'F':
            temp = sensor.get_temperature(W1ThermSensor.DEGREES_F)
        elif unit.upper() == 'K':
            temp = sensor.get_temperature(W1ThermSensor.KELVIN)
        else:
            temp = sensor.get_temperature()

        logger.info("Publishing sensor %s (%s), temperature: %.2f%s%s" % (sensor.id, sensor.type.name, temp, degree, unit.upper()))
        if client.connected is True:
            client.publish(topic + "/sensor/" + sensor.id + '/state', round(temp, 2))
        else:
            logger.warn('Cannot publish, not connected to broker')
    logger.info("Sleeping for %s seconds" % (interval))
    time.sleep(float(interval))


def main():
    global degree
    degree = u"\N{DEGREE SIGN}"
    signal.signal(signal.SIGINT, keyboardInterruptHandler)
    setup_logging()
    get_config()
      
    try:
        connect_to_broker(str(broker))
    except Exception as e:
        print("Exception, ", e.__class__, "occurred.")
        print(e.__class__.__module__)
        print(e.__class__.__name__)

    sensors = get_sensors()
    publish_config(sensors)
    while True:
        publish_sensors(sensors)

if __name__ == "__main__":
    main()
